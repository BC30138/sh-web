# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: ["*"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CR_REGISTRY: crpssp59ni0ne6f64iju
  CR_REPOSITORY: sh-web
  IMAGE_TAG: sh-web.${{ github.sha }}

jobs:
  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Packages setup
        run: |
          pip install flake8==4.0.1
      - name: Python linter [Flake8]
        run: |
          python -m flake8 shweb/

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Packages setup
        run: |
          pip install mypy==0.950
      - name: Python linter [MyPy]
        run: |
          python -m mypy shweb/

  build:
    runs-on: ubuntu-latest
    needs: [flake8, mypy]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: Python linter [Flake8]
        run: |
          python -m flake8 shweb/
      - name: Login to Yandex Cloud Container Registry
        id: login-cr
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Build, tag, and push image to Yandex Cloud Container Registry
        run: |
          docker pull cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest || true
          docker build --cache-from cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
          docker tag cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest
