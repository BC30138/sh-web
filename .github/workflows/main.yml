# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: ["*"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CR_REGISTRY: ${{ secrets.CR_REGISTRY }}
  CR_REPOSITORY: ${{ secrets.CR_REPOSITORY }}
  IMAGE_TAG: sh-web.${{ github.sha }}

jobs:
  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Packages setup
        run: |
          pip install flake8==4.0.1
      - name: Python linter [Flake8]
        run: |
          python -m flake8 shweb/

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Packages setup
        run: |
          pip install types-requests==2.27.27
          pip install mypy==0.950
      - name: Python linter [MyPy]
        run: |
          python -m mypy shweb/

  unittests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Packages setup
        run: |
          pip install -r requirements.txt
      - name: "Create env file"
        run: |
          touch .env
          echo APP_SECRET_KEY=${{ secrets.APP_SECRET_KEY }} >> .env
          
          echo AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} >> .env
          echo AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          
          echo AWS_USER_POOL_ID=${{ secrets.AWS_USER_POOL_ID }} >> .env
          echo AWS_APP_CLIENT_ID=${{ secrets.AWS_APP_CLIENT_ID }} >> .env
          echo AWS_APP_CLIENT_SECRET=${{ secrets.AWS_APP_CLIENT_SECRET }} >> .env
          
          echo AWS_CLOUD_FRONT_DOMAIN=${{ secrets.AWS_CLOUD_FRONT_DOMAIN_TEST }} >> .env
          echo AWS_CLOUD_FRONT_ID=${{ secrets.AWS_CLOUD_FRONT_ID_TEST }} >> .env
          echo S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME_TEST }} >> .env
      - name: Pytest
        run: |
          PYTHONPATH=. pytest tests

  build:
    runs-on: ubuntu-latest
#    needs: [flake8, mypy, unittests]
#    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: "Create env file"
        run: |
          touch .env
          echo APP_SECRET_KEY=${{ secrets.APP_SECRET_KEY }} >> .env

          echo AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} >> .env
          echo AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env

          echo AWS_USER_POOL_ID=${{ secrets.AWS_USER_POOL_ID }} >> .env
          echo AWS_APP_CLIENT_ID=${{ secrets.AWS_APP_CLIENT_ID }} >> .env
          echo AWS_APP_CLIENT_SECRET=${{ secrets.AWS_APP_CLIENT_SECRET }} >> .env

          echo AWS_CLOUD_FRONT_DOMAIN=${{ secrets.AWS_CLOUD_FRONT_DOMAIN }} >> .env
          echo AWS_CLOUD_FRONT_ID=${{ secrets.AWS_CLOUD_FRONT_ID }} >> .env
          echo S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} >> .env
      - name: Login to Yandex Cloud Container Registry
        id: login-cr
        uses: yc-actions/yc-cr-login@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
      - name: Build, tag, and push image to Yandex Cloud Container Registry
        run: |
          docker pull cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest || true
          docker build --cache-from cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
          docker tag cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:latest
